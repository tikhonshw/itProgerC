#4 - Углубленный C++
За модуль вы познакомитесь со множеством интересных концепций. Вы научитесь разбивать проект на несколько файлов. Изучите понятие заголовочные файлы и научитесь работать с директивой #pragma.


Описание
Одной из самых важных концепций языка С++ является тема ссылок и указателей. При помощи них вы можете эффективно контролировать использования памяти на вашем ПК.


Ссылки в C++
Ссылки и указатели схожи между собой, так как оба в качестве значения имеют лишь адрес некого объекта.

Указатель хранит адрес ячейки и если мы захотим изменить значение этой ячейки, то нам придется выполнить операцию "разыменования":

float some = 391; // Простая переменная
float *u = &some; // Указатель на переменную
*u = 98; // Изменение значения переменной
В ссылках такого понятия нет, так как меняя ссылку вы автоматически меняете саму переменную. Ссылки напрямую ссылаются к переменной, поэтому их синтаксис проще.

char symbol = 'A'; // Простая переменная
char &ref = symbol; // Создание ссылки на переменную
// Поскольку мы ссылаемся на переменную, то можем её использовать
// как отдельно взятую переменную
cout << ref << endl; // Вывод символа "А"
ref = 'C'; // Изменение на символ "C"
Использование ссылок и указателей оправдано, если вы передаете данные в функции или же в различные объекты. Они отлично подойдут для передачи большого объема данных. Используя их, вы лишь передаете адрес объекта, а не объект целиком, что значительно сокращает код.


Указатели в С++
Каждая переменная (int x = 1;) хранит данные в определенной ячейке в памяти компьютера. Каждый раз, создавая новую переменную, мы создаем новую ячейку в памяти, с новым значением в ней. Чем больше ячеек, тем больше компьютерной памяти будет занято.

Адрес в памяти компьютера это число, к которому мы можем получить доступ. Указатель, в свою очередь - это тот же адрес в памяти, по которому мы получаем ту же самую переменную и, в итоге, то же самое значение.

Чтобы работать с указателями необходимо воспользоваться двумя специальными символами: & и *. Символ * используется для получения адреса переменной, например:

int t = 237; // Простая переменная
int *p; // Создание указателя,
		// который принимает лишь адрес другой переменной
p = &t; // Устанавливаем адрес нашей первой переменной
Из примера выше, переменные t и p будут равны 237, при этом обе переменные используют лишь одну ячейку памяти, что сокращает общий объем используемой памяти.
